//-----------------------------------
// copystamp.c
//-----------------------------------
// Copyright screen stamper
// To stamp whatever onto the copyright screen's tilemap
// (assuming its in the graphics first)

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cstdint>
#include <ctime>

#define EMPTY_LINE \
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
#define BLANK_LINE \
	{0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00}
#define C2005_POKEMON_LINE \
	{0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x03,0x04,0x05,0x01,0x01,0x01,0x01,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00}
#define C1995_2005_NINTENDO_LINE \
	{0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x0D,0x0E,0x0F,0x03,0x04,0x05,0x01,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00}
#define C1995_2005_CREATURES_LINE \
	{0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x0D,0x0E,0x0F,0x03,0x04,0x05,0x01,0x17,0x18,0x19,0x1A,0x18,0x1B,0x1C,0x1D,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00}
#define C1995_2005_GAMEFREAK_LINE \
	{0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x0D,0x0E,0x0F,0x03,0x04,0x05,0x01,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00}
#define C1995_2019_TPP_LINE \
	{0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x27,0x28,0x29,0x01,0x01,0x01,0x01,0x2A,0x06,0x06,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00}

uint16_t templateScreen[32][32] = {
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	C2005_POKEMON_LINE,
	BLANK_LINE,
	C1995_2005_NINTENDO_LINE,
	BLANK_LINE,
	C1995_2005_CREATURES_LINE,
	BLANK_LINE,
	C1995_2005_GAMEFREAK_LINE,
	BLANK_LINE,
	C1995_2019_TPP_LINE,
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	BLANK_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
	EMPTY_LINE,
};

void stampString(int l, char* str)
{
	uint16_t* line = templateScreen[l];
	for (int i = 0; i < 32; i++)
	{
		uint16_t c = str[i];
		if (c == 0) break; //end of string
		if (c >= 0x60) c -= 0x20; //uppercase letters
		if (c >= 0x60) continue; //skip letter if still too high
		if (c < 0x20) continue; //skip if in control characters
		line[i] = c + 0x20;
	}
}

void stampTime(int l, time_t timestamp)
{
	char tstr[32];
	strftime(tstr, 32, "%F %R", gmtime(&timestamp));
	stampString(l, tstr);
}

int main(int argc, char* argv[])
{
	char *argfile = nullptr;
	FILE *outfile;
	
	// show syntax
	if (argc <= 2 || argc % 2 != 0)
	{
		printf("Copystamp by Tustin2121\n");
		printf("Syntax: copystamp <outfile> [stamps...]\n");
		printf("\n");
		printf("Stamps in the format: -[lineno]:[type] <value>\n");
		printf("   lineno: the vertical line of the copyright screen, 0-20\n");
		printf("   type: one of the following\n");
		printf("       \"s\" - output value as string, uppercased\n");
		printf("       \"t\" - output unix timestamp value as YYYY-MM-DD hh:mm\n");
		printf("\n");
		
		for (int i = 0; i < argc; i++)
		{
			printf("%d = [%s]\n", i, argv[i]);
		}
		printf("\n");
		return -1;
	}
	
	// get filename for output
	argfile = argv[1];
	
	// do stamping
	for (int i = 2; i < argc; i+=2) 
	{
		char* arg = argv[i];
		if (arg[0] != '-')
		{
			printf("Invalid stamp format at argument %d!", i);
			return -1;
		}
		if (arg[2] != ':' && arg[3] != ':')
		{
			printf("Invalid stamp format at argument %d!", i);
			return -1;
		}
		
		char line = 0;
		char type = 0;
		if (arg[2] == ':')
		{
			line = arg[1] - '0';
			type = arg[3];
		}
		else
		{
			line = (arg[1] - '0') * 10 + (arg[2] - '0');
			type = arg[4];
		}
		
		switch (type) {
			case 's': stampString(line, argv[i+1]); break;
			case 't': stampTime(line, strtoul(argv[i+1], nullptr, 10)); break;
		}
	}
	
	outfile = fopen(argfile, "wb");
	fwrite(&templateScreen, sizeof(templateScreen), 1, outfile);
	fclose(outfile);
	
	return 0;
}
